{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/ivan_j_lee_qrcode.png","path":"img/ivan_j_lee_qrcode.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1510994611990},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1510994611991},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1510994611991},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1510994611991},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1510994611991},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1510994611997},{"_id":"source/_drafts/Activity.md","hash":"97beb85ad307d42d1f7cbeab05d2636a5fbaf4ba","modified":1510994611989},{"_id":"source/_posts/first_page.md","hash":"7fd0482358befec18476cc262a47f8b3886dfffd","modified":1510994611990},{"_id":"source/_posts/git.md","hash":"59f36b22c001d00bb82d3ba9cd6f846563654b28","modified":1510994611990},{"_id":"source/about/index.md","hash":"b480646b7d691fb0acf92bcff66e522aa730c71b","modified":1510994611990},{"_id":"source/img/ivan_j_lee_qrcode.png","hash":"201d5df717e3df0be2f4f9953f0d623638912f18","modified":1510994611990},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1510994611991},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1510994611992},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1510994611991},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1510994611992},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1510994611992},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1510994611992},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1510994611992},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1510994611996},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1510994611996},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1510994611996},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1510994611996},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1510994611997},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1510994611997},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1510994611997},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1510994611997},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1510994611993},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1510994611993},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1510994611993},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1510994611993},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1510994611993},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1510994611993},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1510994611994},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1510994611994},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1510994611994},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1510994611995},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1510994611995},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1510994611995},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1510994611995},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1510994611996},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1510994611996},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1510994611997},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1510994611999},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1510994612005},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1510994612005},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1510994612005},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1510994612005},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1510994612005},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1510994612006},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1510994612006},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1510994612007},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1510994612008},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1510994612008},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1510994612008},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1510994611994},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1510994611994},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1510994611994},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1510994611995},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1510994611995},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1510994611995},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1510994611998},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1510994611998},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1510994611998},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1510994611998},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1510994611998},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1510994611998},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1510994611998},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1510994611999},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1510994611999},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1510994611999},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1510994611999},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1510994611999},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1510994612000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1510994612000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1510994612002},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1510994612006},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1510994612006},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1510994612007},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1510994612007},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1510994612007},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1510994612007},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1510994612002},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1510994612001},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1510994612004},{"_id":"public/about/index.html","hash":"a7f00b4b5aa440a6ee74fa493d8001b028256f9d","modified":1510994686226},{"_id":"public/2017/06/08/first_page/index.html","hash":"5fc902e09c5fc36a0bb88724dc8ba2babde8444c","modified":1510994686226},{"_id":"public/archives/index.html","hash":"b1565ca906079e966879b8aeab6c9cc10e50c8f4","modified":1510994686227},{"_id":"public/archives/2017/index.html","hash":"81fb4767e1a67251622923bfca0b993a2a929bcc","modified":1510994686227},{"_id":"public/archives/2017/06/index.html","hash":"a1cf7176f2d81eb6a45dc04cff97b7efb94cfd95","modified":1510994686227},{"_id":"public/tags/git/index.html","hash":"5fb582a7a78c9071546a95d965defe6f3020df2e","modified":1510994686227},{"_id":"public/2017/06/08/git/index.html","hash":"ef77325c7cabe2c64fe2e71d80d5dad642b76951","modified":1510994686227},{"_id":"public/index.html","hash":"d44dd998efcd140513818a54dc3de1c3955b140f","modified":1510994686227},{"_id":"public/img/ivan_j_lee_qrcode.png","hash":"201d5df717e3df0be2f4f9953f0d623638912f18","modified":1510994686231},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1510994686231},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1510994686231},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1510994686231},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1510994686231},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1510994686231},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1510994686231},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1510994686231},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1510994686231},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1510994686232},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1510994686232},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1510994686610},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1510994686613},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1510994686613},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1510994686613},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1510994686613},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1510994686613},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1510994686613},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1510994686613},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1510994686613},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1510994686613},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1510994686613},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1510994686615},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1510994686615}],"Category":[],"Data":[],"Page":[{"title":"Ivan J. Lee","date":"2017-06-08T15:11:06.000Z","_content":"![](../img/ivan_j_lee_qrcode.png)\n","source":"about/index.md","raw":"---\ntitle: Ivan J. Lee\ndate: 2017-06-08 23:11:06\n---\n![](../img/ivan_j_lee_qrcode.png)\n","updated":"2017-11-18T08:43:31.990Z","path":"about/index.html","comments":1,"layout":"page","_id":"cja5381et0005f62mgpw1zbi8","content":"<p><img src=\"../img/ivan_j_lee_qrcode.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"../img/ivan_j_lee_qrcode.png\" alt=\"\"></p>\n"}],"Post":[{"_content":"#### Activity异常情况下的生命周期\n\n&#8195;&#8195;onStop()之前调用onSaveInstante()保存数据，在onCreate之后调用onRestoreInstanceState(Bundle)恢复数据，委托Window以及上层的View保存数据</br>\n**内存不足Activity被杀死**</br>\n**配置变化导致Activity重建**</br>\n配置```android:configChanges=\"\"```可以让配置改变的时候不重启Activity\n\n#### 隐式Intent匹配\n**action: **只要指定就必须至少有一个，有一个匹配成功即匹配成功</br>\n**category: **可以没有，一旦指定，必须完全匹配</br>\n**data: **和action的匹配规则一样\n\n#### Activity的启动模式\n**stardard** 标准模式，每次启动均创建一个新的Activity实例;</br>\n**singleTop** 栈顶复用，要启动的Activity在栈顶时复用Activity实例，否则和标准模式一样；</br>\n**singleTask** 栈内复用，在要启动的任务栈中有Activity的实例就复用；</br>\n**singleInstance** 单例模式，独享任务栈</br>\n\n 指定要启动的Activity的任务栈，taskAffinity，默认和包名一样;\n\n 指定启动模式的方式，manifest文件或者Intent中设置flag，不完全一直，可以指定NEW_TASK，SINGLE_TOP，CLEAR_TOP，EXECULE_FROM_RECENT\n\n [Activity与启动方式详解](http://blog.csdn.net/singwhatiwanna/article/details/9294285)\n","source":"_drafts/Activity.md","raw":"#### Activity异常情况下的生命周期\n\n&#8195;&#8195;onStop()之前调用onSaveInstante()保存数据，在onCreate之后调用onRestoreInstanceState(Bundle)恢复数据，委托Window以及上层的View保存数据</br>\n**内存不足Activity被杀死**</br>\n**配置变化导致Activity重建**</br>\n配置```android:configChanges=\"\"```可以让配置改变的时候不重启Activity\n\n#### 隐式Intent匹配\n**action: **只要指定就必须至少有一个，有一个匹配成功即匹配成功</br>\n**category: **可以没有，一旦指定，必须完全匹配</br>\n**data: **和action的匹配规则一样\n\n#### Activity的启动模式\n**stardard** 标准模式，每次启动均创建一个新的Activity实例;</br>\n**singleTop** 栈顶复用，要启动的Activity在栈顶时复用Activity实例，否则和标准模式一样；</br>\n**singleTask** 栈内复用，在要启动的任务栈中有Activity的实例就复用；</br>\n**singleInstance** 单例模式，独享任务栈</br>\n\n 指定要启动的Activity的任务栈，taskAffinity，默认和包名一样;\n\n 指定启动模式的方式，manifest文件或者Intent中设置flag，不完全一直，可以指定NEW_TASK，SINGLE_TOP，CLEAR_TOP，EXECULE_FROM_RECENT\n\n [Activity与启动方式详解](http://blog.csdn.net/singwhatiwanna/article/details/9294285)\n","slug":"Activity","published":0,"date":"2017-11-18T08:43:31.989Z","updated":"2017-11-18T08:43:31.989Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cja5381dn0000f62mku562vpu","content":"<h4 id=\"Activity异常情况下的生命周期\"><a href=\"#Activity异常情况下的生命周期\" class=\"headerlink\" title=\"Activity异常情况下的生命周期\"></a>Activity异常情况下的生命周期</h4><p>&#8195;&#8195;onStop()之前调用onSaveInstante()保存数据，在onCreate之后调用onRestoreInstanceState(Bundle)恢复数据，委托Window以及上层的View保存数据<br><br><strong>内存不足Activity被杀死</strong><br><br><strong>配置变化导致Activity重建</strong><br><br>配置<code>android:configChanges=&quot;&quot;</code>可以让配置改变的时候不重启Activity</p>\n<h4 id=\"隐式Intent匹配\"><a href=\"#隐式Intent匹配\" class=\"headerlink\" title=\"隐式Intent匹配\"></a>隐式Intent匹配</h4><p><strong>action: </strong>只要指定就必须至少有一个，有一个匹配成功即匹配成功<br><br><strong>category: </strong>可以没有，一旦指定，必须完全匹配<br><br><strong>data: </strong>和action的匹配规则一样</p>\n<h4 id=\"Activity的启动模式\"><a href=\"#Activity的启动模式\" class=\"headerlink\" title=\"Activity的启动模式\"></a>Activity的启动模式</h4><p><strong>stardard</strong> 标准模式，每次启动均创建一个新的Activity实例;<br><br><strong>singleTop</strong> 栈顶复用，要启动的Activity在栈顶时复用Activity实例，否则和标准模式一样；<br><br><strong>singleTask</strong> 栈内复用，在要启动的任务栈中有Activity的实例就复用；<br><br><strong>singleInstance</strong> 单例模式，独享任务栈<br></p>\n<p> 指定要启动的Activity的任务栈，taskAffinity，默认和包名一样;</p>\n<p> 指定启动模式的方式，manifest文件或者Intent中设置flag，不完全一直，可以指定NEW_TASK，SINGLE_TOP，CLEAR_TOP，EXECULE_FROM_RECENT</p>\n<p> <a href=\"http://blog.csdn.net/singwhatiwanna/article/details/9294285\" target=\"_blank\" rel=\"external\">Activity与启动方式详解</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Activity异常情况下的生命周期\"><a href=\"#Activity异常情况下的生命周期\" class=\"headerlink\" title=\"Activity异常情况下的生命周期\"></a>Activity异常情况下的生命周期</h4><p>&#8195;&#8195;onStop()之前调用onSaveInstante()保存数据，在onCreate之后调用onRestoreInstanceState(Bundle)恢复数据，委托Window以及上层的View保存数据<br><br><strong>内存不足Activity被杀死</strong><br><br><strong>配置变化导致Activity重建</strong><br><br>配置<code>android:configChanges=&quot;&quot;</code>可以让配置改变的时候不重启Activity</p>\n<h4 id=\"隐式Intent匹配\"><a href=\"#隐式Intent匹配\" class=\"headerlink\" title=\"隐式Intent匹配\"></a>隐式Intent匹配</h4><p><strong>action: </strong>只要指定就必须至少有一个，有一个匹配成功即匹配成功<br><br><strong>category: </strong>可以没有，一旦指定，必须完全匹配<br><br><strong>data: </strong>和action的匹配规则一样</p>\n<h4 id=\"Activity的启动模式\"><a href=\"#Activity的启动模式\" class=\"headerlink\" title=\"Activity的启动模式\"></a>Activity的启动模式</h4><p><strong>stardard</strong> 标准模式，每次启动均创建一个新的Activity实例;<br><br><strong>singleTop</strong> 栈顶复用，要启动的Activity在栈顶时复用Activity实例，否则和标准模式一样；<br><br><strong>singleTask</strong> 栈内复用，在要启动的任务栈中有Activity的实例就复用；<br><br><strong>singleInstance</strong> 单例模式，独享任务栈<br></p>\n<p> 指定要启动的Activity的任务栈，taskAffinity，默认和包名一样;</p>\n<p> 指定启动模式的方式，manifest文件或者Intent中设置flag，不完全一直，可以指定NEW_TASK，SINGLE_TOP，CLEAR_TOP，EXECULE_FROM_RECENT</p>\n<p> <a href=\"http://blog.csdn.net/singwhatiwanna/article/details/9294285\" target=\"_blank\" rel=\"external\">Activity与启动方式详解</a></p>\n"},{"title":"Git常用命令","date":"2017-06-08T15:12:03.000Z","_content":"*本文出处https://zhuanlan.zhihu.com/p/25415162 或者 http://blog.csdn.net/u013301192/article/details/69568557*\n\nGit作为一种常用的现代版本管理工具，应用的十分广泛，作为开发者，Git是一项必不可少的技能，掌握常见的Git命令能够大大提高我们的工作效率。\n\n这里只介绍最基础的，最常用的命令，配置相关的东西直接略过，git相关的一些概念也不介绍了。在执行下面的命令的时候，假定你已经安装好了git，并且在你的远程git仓库的网站上添加了你的key，建立了安全的连接。以下所有的命令基于Mac OS X 10.12，Git版本2.10.1 (Apple Git-78)。\n\n### 基本命令\n\n#### 下载项目\n拿到项目的git地址，比如这个git@github.com:IvanJLee/git.git，新建一个文件夹，把代码下载下来：\n```\nmkdir LearningGit\ncd LearningGit\ngit clone git@github.com:IvanJLee/git.git\n```\n\n等待代码下载完成，LearningGit目录下，多出了一个git文件夹，这个文件夹中就是上面那个仓库的所有文件了。进入git文件夹，查看所有文件，会发现有一个.git文件夹，这就是Git的版本库了。\n\n有时候是在本地新建的项目，想上传到远程的仓库，在项目的根目录下，初始化git仓库：\n```\ngit init\n```\n\n查看远程仓库：\n```\ngit remote -v\n```\n\n添加一个远程仓库：\n```\ngit remote add origin-name git@github.com:IvanJLee/git.git\n```\n\n#### 个人信息的配置\n一般一个项目，提交代码的时候都会提前配置好个人信息，以便查看提交的作者信息。没有配置的时候，名字默认是取的是操作系统的当前用户的名字。\n\n查看配置信息：\n```\ngit config --list\n```\n\n设置用户名和邮箱（全局的配置加上--global，只是当前项目的话，就不要了，这里一般当前项目没有配的话，就用的是全局的配置。为什么要有两个呢，比如有这样的场景，我的笔记本是公司给配的 ，git的全局配置是真名和公司邮箱，但有时候，我会写一些自己的代码，上传到GitHub上，用的是我的昵称和私人邮箱，所以个人的项目就进行单独的配置）：\n```\ngit config (--global) user.name \"Ivan\"\ngit config (--global) user.mail \"lijundut@foxmail.com\"\n```\n\n当然修改配置除了上述方法之外，还可以直接改配置文件，可以改的很多，绝对不止用户名和邮箱，修改当前项目的配置的话直接编辑.git/config文件；修改当前用户的配置，编辑~/.gitconfig；修改整个操作系统的配置，编辑/etc/gitconfig.\n\n#### 提交代码\n对项目中的文件作出修改或删除，或者新建文件之后，查看哪些文件有修改：\n\n```\ngit status\n```\n![这里写图片描述](https://pic3.zhimg.com/v2-b90a8993bb2181b3699f02dc808e13ca_b.png)\nChanges not staged for commit是对项目中已有的文件作出的修改，Untracked files是新建的文件，尚未加到版本库中。\n\n查看具体有哪些修改，查看全部文件的：\n```\ngit diff\n```\n\n或者，查看单个文件：\n\n```\ngit diff README.md\n```\n\n将需要提交的文件加到待提交列表（支持正则表达式），比如把README.md加进去：\n\n```\ngit add README.md\n```\n\n或者把所有修改过的文件全部加进去：\n\n```\ngit add *\n```\n\n提交修改到本地暂存区：\n\n```\ngit commit -m 'my commit message'\n```\n\n或者，使用其它的文本编辑器编辑提交信息（输完下面的命令后，会自动跳过去，Mac OX的终端中默认用vim）：\n\n```\ngit commit\n```\n\n提交修改到远程分支（这时候可能别人已经修改了代码，你的push会被拒绝，先pull一下就可以了）：\n\n```\ngit push\n```\n\n获取远程的修改\nGit是协同工作的工具，我们自己在修改的同时，别人也在修改，那么获取别人的修改就有了一下的命令。\n\n获取远程仓库的修改：\n\n```\ngit fetch\n```\n\n获取远程仓库的修改，并合并到本地分支：\n\n```\ngit pull\n```\n\n有多个远程仓库的话：\n\n```\ngit pull origin1\ngit pull origin2\n```\n\n简单来说，pull = fetch + merge，详细区别请看git pull与fetch的区别\n\n#### 分支管理\n一般来说，刚拉下来的项目代码都是在master分支上，绝大多数情况下，master分支是受保护的分支，不允许直接提交代码，这也是我们在使用Git时应当注意的。master分支在任何情况下都是禁止直接提交代码的。\n\n查看本地分支：\n\n```\ngit branch\n```\n\n查看远程分支：\n\n```\ngit branch -r\n```\n\n查看全部分支：\n\n```\ngit branch -a\n```\n\n基于当前所在的本地分支创建一个新分支（比如当前在master分支，执行下面的命令后切到了my-develop分支，但在my-develop分支上push代码到远程仓库仍然是提交到master分支上的）：\n\n```\ngit checkout -b my-develop\n```\n\n基于远程分支创建一个新分支（也是创建一个新的分支，但是和上面不同的是，在my-branch上push代码会提交到远程的develop分支上）：\n\n```\ngit checkout -b origin/develop my-branch\n```\n\n切换到本地的另外一个分支上，比如develop-ivan（如果这个分支不存在，会报错，加上参数-b创建新的分支）：\n\n```\ngit checkout develop-ivan\n```\n\n给分支改名：\n\n```\ngit branch -m old-branch-name new-branch-name\n```\n\n把本地分支提交到远程仓库：\n\n```\ngit push origin -u local-branch-name:remote-branch-name\n```\n\n上面的一条命令等同于下面的两条命令：\n\n```\ngit push origin local-branch-name:remote-branch-name\ngit branch --set-upstream-to=origin/remote-branch-name local-branch-name\n```\n\n删除一个本地分支，比如删除my-branch分支：\n\n```\ngit branch -d my-branch\n```\n\n如果本地有commit，无法删除，删除本地本地分支以及此分支上的commit：\n\n```\ngit branch -D my-branch\n```\n\n删除一个远程分支，比如develop-lee分支(没有直接删除远程分支的命令，使用push命令，本地分支名为空就可以了)：\n\n```\ngit push origin :develop\n```\n\n合并其他分支的代码到当前分支：\n\n```\ngit merge other-branch-name\n```\n\n或：\n\n```\ngit rebase other-branch-name\n```\n\nmerge和rebase的功能基本相似，都是合并代码，区别是rebase会把git提交的时间线压平，提交的时间线看起来会更加整洁，但是不建议这么做，一般建议使用merge。git中merge和rebase的区别\n查看提交信息\n查看当前分支的commit信息：\n\n```\ngit log\n```\n\n查看每次commit修改的文件：\n\n```\ngit log --stat\n```\n\n按关键字筛选commit信息：\n\n```\ngit log -S keyword\n```\n\n按作者筛选commit信息，支持正则：\n\n```\ngit log --author = \"Ivan\"\n```\n\n#### 暂存代码\n有时候，正在自己的分支上开发，突然出现了线上bug，需要去其他分支修复，当前的分支功能又没有开发完毕，你还不想提交未完成的代码，这时候使用stash命令就会很方便。stash命令可以把修改的代码都存在本地，而不commit，之后回来可以恢复之前的修改。常用的stash命令如下：\n\n查看保存的修改：\n\n```\ngit stash list\n```\n\n查看某一个stash修改的具体内容：\n\n```\ngit stash show -p stash@{1}\n```\n\n查看某一个stash修改的文件：\n\n```\ngit stash show stash@{0}\n```\n\n保存当前的修改：\n\n```\ngit stash save \"save message\"\n```\n\n或者，自动填写stash message：\n\n```\ngit stash\n```\n\n删除某一次stash：\n\n```\ngit stash drop stash@{1}\n```\n\n或者删除最近的一次stash：\n\n```\ngit stash drop\n```\n\n恢复最近一次stash：\n\n```\ngit stash pop\n```\n\n恢复某一次stash：\n\n```\ngit stash pop stash@{1}\n```\n\n删除全部的stash：\n\n```\ngit stash clear\n```\n\n#### 其他常见命令\n恢复一个文件的修改（和切换分支一样，也是checkout）:\n\n```\ngit checkout file_name\n```\n\n把提交的文件回滚到某一次提交（先用git log查看提交记录，找到某次提交的sha1值，使用git  reset回到某次提交，其中soft表示保留新的修改但取消git add，mixed表示保留修改和git add，hard表示不保留修改）：\n\n```\ngit log\ngit reset --(soft|mixed|hard) 3275a0c85fb2fbbcd6eaa65be1f956d27fa9998b\n```\n\n使用git add命令，把文件加到要提交的列表中后，把它待提交列表中移除：\n\n```\ngit reset --HEAD filename\n```\n\n把一个文件从版本库中移除：\n\n```\ngit rm filename\n```\n\n### 更多应用\n\n以上只是Git使用的最基本命令，掌握这些命令，工作中Git操作大部分已经没有问题。当然，Git的功能是很强大的，所能做的事情也远远不止这些，要全面掌握Git的技巧，一两篇文章是说不清楚的。当然，熟悉Git最好的方法就是去实践，学以致用，用的多了自然就记得住。\n\n查看所有的Git命令，可以详细了解每一条命令以及加参数的用法：\n\n```\ngit --help\n```\n\n要想系统学习Git，可以找到的资源有很多，下面是一些学习Git的不错的网站。\n\nPro git: [git--distributed-is-the-new-centralized](https://git-scm.com/)，简体中文版：[Pro Git](https://git-scm.com/book/zh/v2)\n\n[廖雪峰的Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n\n[learngitbranching以游戏的方式学习Git](http://learngitbranching.js.org/)\n","source":"_posts/git.md","raw":"---\ntitle: Git常用命令\ndate: 2017-06-08 23:12:03\ntags: git\n---\n*本文出处https://zhuanlan.zhihu.com/p/25415162 或者 http://blog.csdn.net/u013301192/article/details/69568557*\n\nGit作为一种常用的现代版本管理工具，应用的十分广泛，作为开发者，Git是一项必不可少的技能，掌握常见的Git命令能够大大提高我们的工作效率。\n\n这里只介绍最基础的，最常用的命令，配置相关的东西直接略过，git相关的一些概念也不介绍了。在执行下面的命令的时候，假定你已经安装好了git，并且在你的远程git仓库的网站上添加了你的key，建立了安全的连接。以下所有的命令基于Mac OS X 10.12，Git版本2.10.1 (Apple Git-78)。\n\n### 基本命令\n\n#### 下载项目\n拿到项目的git地址，比如这个git@github.com:IvanJLee/git.git，新建一个文件夹，把代码下载下来：\n```\nmkdir LearningGit\ncd LearningGit\ngit clone git@github.com:IvanJLee/git.git\n```\n\n等待代码下载完成，LearningGit目录下，多出了一个git文件夹，这个文件夹中就是上面那个仓库的所有文件了。进入git文件夹，查看所有文件，会发现有一个.git文件夹，这就是Git的版本库了。\n\n有时候是在本地新建的项目，想上传到远程的仓库，在项目的根目录下，初始化git仓库：\n```\ngit init\n```\n\n查看远程仓库：\n```\ngit remote -v\n```\n\n添加一个远程仓库：\n```\ngit remote add origin-name git@github.com:IvanJLee/git.git\n```\n\n#### 个人信息的配置\n一般一个项目，提交代码的时候都会提前配置好个人信息，以便查看提交的作者信息。没有配置的时候，名字默认是取的是操作系统的当前用户的名字。\n\n查看配置信息：\n```\ngit config --list\n```\n\n设置用户名和邮箱（全局的配置加上--global，只是当前项目的话，就不要了，这里一般当前项目没有配的话，就用的是全局的配置。为什么要有两个呢，比如有这样的场景，我的笔记本是公司给配的 ，git的全局配置是真名和公司邮箱，但有时候，我会写一些自己的代码，上传到GitHub上，用的是我的昵称和私人邮箱，所以个人的项目就进行单独的配置）：\n```\ngit config (--global) user.name \"Ivan\"\ngit config (--global) user.mail \"lijundut@foxmail.com\"\n```\n\n当然修改配置除了上述方法之外，还可以直接改配置文件，可以改的很多，绝对不止用户名和邮箱，修改当前项目的配置的话直接编辑.git/config文件；修改当前用户的配置，编辑~/.gitconfig；修改整个操作系统的配置，编辑/etc/gitconfig.\n\n#### 提交代码\n对项目中的文件作出修改或删除，或者新建文件之后，查看哪些文件有修改：\n\n```\ngit status\n```\n![这里写图片描述](https://pic3.zhimg.com/v2-b90a8993bb2181b3699f02dc808e13ca_b.png)\nChanges not staged for commit是对项目中已有的文件作出的修改，Untracked files是新建的文件，尚未加到版本库中。\n\n查看具体有哪些修改，查看全部文件的：\n```\ngit diff\n```\n\n或者，查看单个文件：\n\n```\ngit diff README.md\n```\n\n将需要提交的文件加到待提交列表（支持正则表达式），比如把README.md加进去：\n\n```\ngit add README.md\n```\n\n或者把所有修改过的文件全部加进去：\n\n```\ngit add *\n```\n\n提交修改到本地暂存区：\n\n```\ngit commit -m 'my commit message'\n```\n\n或者，使用其它的文本编辑器编辑提交信息（输完下面的命令后，会自动跳过去，Mac OX的终端中默认用vim）：\n\n```\ngit commit\n```\n\n提交修改到远程分支（这时候可能别人已经修改了代码，你的push会被拒绝，先pull一下就可以了）：\n\n```\ngit push\n```\n\n获取远程的修改\nGit是协同工作的工具，我们自己在修改的同时，别人也在修改，那么获取别人的修改就有了一下的命令。\n\n获取远程仓库的修改：\n\n```\ngit fetch\n```\n\n获取远程仓库的修改，并合并到本地分支：\n\n```\ngit pull\n```\n\n有多个远程仓库的话：\n\n```\ngit pull origin1\ngit pull origin2\n```\n\n简单来说，pull = fetch + merge，详细区别请看git pull与fetch的区别\n\n#### 分支管理\n一般来说，刚拉下来的项目代码都是在master分支上，绝大多数情况下，master分支是受保护的分支，不允许直接提交代码，这也是我们在使用Git时应当注意的。master分支在任何情况下都是禁止直接提交代码的。\n\n查看本地分支：\n\n```\ngit branch\n```\n\n查看远程分支：\n\n```\ngit branch -r\n```\n\n查看全部分支：\n\n```\ngit branch -a\n```\n\n基于当前所在的本地分支创建一个新分支（比如当前在master分支，执行下面的命令后切到了my-develop分支，但在my-develop分支上push代码到远程仓库仍然是提交到master分支上的）：\n\n```\ngit checkout -b my-develop\n```\n\n基于远程分支创建一个新分支（也是创建一个新的分支，但是和上面不同的是，在my-branch上push代码会提交到远程的develop分支上）：\n\n```\ngit checkout -b origin/develop my-branch\n```\n\n切换到本地的另外一个分支上，比如develop-ivan（如果这个分支不存在，会报错，加上参数-b创建新的分支）：\n\n```\ngit checkout develop-ivan\n```\n\n给分支改名：\n\n```\ngit branch -m old-branch-name new-branch-name\n```\n\n把本地分支提交到远程仓库：\n\n```\ngit push origin -u local-branch-name:remote-branch-name\n```\n\n上面的一条命令等同于下面的两条命令：\n\n```\ngit push origin local-branch-name:remote-branch-name\ngit branch --set-upstream-to=origin/remote-branch-name local-branch-name\n```\n\n删除一个本地分支，比如删除my-branch分支：\n\n```\ngit branch -d my-branch\n```\n\n如果本地有commit，无法删除，删除本地本地分支以及此分支上的commit：\n\n```\ngit branch -D my-branch\n```\n\n删除一个远程分支，比如develop-lee分支(没有直接删除远程分支的命令，使用push命令，本地分支名为空就可以了)：\n\n```\ngit push origin :develop\n```\n\n合并其他分支的代码到当前分支：\n\n```\ngit merge other-branch-name\n```\n\n或：\n\n```\ngit rebase other-branch-name\n```\n\nmerge和rebase的功能基本相似，都是合并代码，区别是rebase会把git提交的时间线压平，提交的时间线看起来会更加整洁，但是不建议这么做，一般建议使用merge。git中merge和rebase的区别\n查看提交信息\n查看当前分支的commit信息：\n\n```\ngit log\n```\n\n查看每次commit修改的文件：\n\n```\ngit log --stat\n```\n\n按关键字筛选commit信息：\n\n```\ngit log -S keyword\n```\n\n按作者筛选commit信息，支持正则：\n\n```\ngit log --author = \"Ivan\"\n```\n\n#### 暂存代码\n有时候，正在自己的分支上开发，突然出现了线上bug，需要去其他分支修复，当前的分支功能又没有开发完毕，你还不想提交未完成的代码，这时候使用stash命令就会很方便。stash命令可以把修改的代码都存在本地，而不commit，之后回来可以恢复之前的修改。常用的stash命令如下：\n\n查看保存的修改：\n\n```\ngit stash list\n```\n\n查看某一个stash修改的具体内容：\n\n```\ngit stash show -p stash@{1}\n```\n\n查看某一个stash修改的文件：\n\n```\ngit stash show stash@{0}\n```\n\n保存当前的修改：\n\n```\ngit stash save \"save message\"\n```\n\n或者，自动填写stash message：\n\n```\ngit stash\n```\n\n删除某一次stash：\n\n```\ngit stash drop stash@{1}\n```\n\n或者删除最近的一次stash：\n\n```\ngit stash drop\n```\n\n恢复最近一次stash：\n\n```\ngit stash pop\n```\n\n恢复某一次stash：\n\n```\ngit stash pop stash@{1}\n```\n\n删除全部的stash：\n\n```\ngit stash clear\n```\n\n#### 其他常见命令\n恢复一个文件的修改（和切换分支一样，也是checkout）:\n\n```\ngit checkout file_name\n```\n\n把提交的文件回滚到某一次提交（先用git log查看提交记录，找到某次提交的sha1值，使用git  reset回到某次提交，其中soft表示保留新的修改但取消git add，mixed表示保留修改和git add，hard表示不保留修改）：\n\n```\ngit log\ngit reset --(soft|mixed|hard) 3275a0c85fb2fbbcd6eaa65be1f956d27fa9998b\n```\n\n使用git add命令，把文件加到要提交的列表中后，把它待提交列表中移除：\n\n```\ngit reset --HEAD filename\n```\n\n把一个文件从版本库中移除：\n\n```\ngit rm filename\n```\n\n### 更多应用\n\n以上只是Git使用的最基本命令，掌握这些命令，工作中Git操作大部分已经没有问题。当然，Git的功能是很强大的，所能做的事情也远远不止这些，要全面掌握Git的技巧，一两篇文章是说不清楚的。当然，熟悉Git最好的方法就是去实践，学以致用，用的多了自然就记得住。\n\n查看所有的Git命令，可以详细了解每一条命令以及加参数的用法：\n\n```\ngit --help\n```\n\n要想系统学习Git，可以找到的资源有很多，下面是一些学习Git的不错的网站。\n\nPro git: [git--distributed-is-the-new-centralized](https://git-scm.com/)，简体中文版：[Pro Git](https://git-scm.com/book/zh/v2)\n\n[廖雪峰的Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n\n[learngitbranching以游戏的方式学习Git](http://learngitbranching.js.org/)\n","slug":"git","published":1,"updated":"2017-11-18T08:43:31.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja5381dq0001f62m6ni0p8t6","content":"<p><em>本文出处<a href=\"https://zhuanlan.zhihu.com/p/25415162\" target=\"_blank\" rel=\"external\">https://zhuanlan.zhihu.com/p/25415162</a> 或者 <a href=\"http://blog.csdn.net/u013301192/article/details/69568557\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/u013301192/article/details/69568557</a></em></p>\n<p>Git作为一种常用的现代版本管理工具，应用的十分广泛，作为开发者，Git是一项必不可少的技能，掌握常见的Git命令能够大大提高我们的工作效率。</p>\n<p>这里只介绍最基础的，最常用的命令，配置相关的东西直接略过，git相关的一些概念也不介绍了。在执行下面的命令的时候，假定你已经安装好了git，并且在你的远程git仓库的网站上添加了你的key，建立了安全的连接。以下所有的命令基于Mac OS X 10.12，Git版本2.10.1 (Apple Git-78)。</p>\n<h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><h4 id=\"下载项目\"><a href=\"#下载项目\" class=\"headerlink\" title=\"下载项目\"></a>下载项目</h4><p>拿到项目的git地址，比如这个git@github.com:IvanJLee/git.git，新建一个文件夹，把代码下载下来：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir LearningGit</div><div class=\"line\">cd LearningGit</div><div class=\"line\">git clone git@github.com:IvanJLee/git.git</div></pre></td></tr></table></figure></p>\n<p>等待代码下载完成，LearningGit目录下，多出了一个git文件夹，这个文件夹中就是上面那个仓库的所有文件了。进入git文件夹，查看所有文件，会发现有一个.git文件夹，这就是Git的版本库了。</p>\n<p>有时候是在本地新建的项目，想上传到远程的仓库，在项目的根目录下，初始化git仓库：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div></pre></td></tr></table></figure></p>\n<p>查看远程仓库：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote -v</div></pre></td></tr></table></figure></p>\n<p>添加一个远程仓库：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add origin-name git@github.com:IvanJLee/git.git</div></pre></td></tr></table></figure></p>\n<h4 id=\"个人信息的配置\"><a href=\"#个人信息的配置\" class=\"headerlink\" title=\"个人信息的配置\"></a>个人信息的配置</h4><p>一般一个项目，提交代码的时候都会提前配置好个人信息，以便查看提交的作者信息。没有配置的时候，名字默认是取的是操作系统的当前用户的名字。</p>\n<p>查看配置信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --list</div></pre></td></tr></table></figure></p>\n<p>设置用户名和邮箱（全局的配置加上–global，只是当前项目的话，就不要了，这里一般当前项目没有配的话，就用的是全局的配置。为什么要有两个呢，比如有这样的场景，我的笔记本是公司给配的 ，git的全局配置是真名和公司邮箱，但有时候，我会写一些自己的代码，上传到GitHub上，用的是我的昵称和私人邮箱，所以个人的项目就进行单独的配置）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config (--global) user.name &quot;Ivan&quot;</div><div class=\"line\">git config (--global) user.mail &quot;lijundut@foxmail.com&quot;</div></pre></td></tr></table></figure></p>\n<p>当然修改配置除了上述方法之外，还可以直接改配置文件，可以改的很多，绝对不止用户名和邮箱，修改当前项目的配置的话直接编辑.git/config文件；修改当前用户的配置，编辑~/.gitconfig；修改整个操作系统的配置，编辑/etc/gitconfig.</p>\n<h4 id=\"提交代码\"><a href=\"#提交代码\" class=\"headerlink\" title=\"提交代码\"></a>提交代码</h4><p>对项目中的文件作出修改或删除，或者新建文件之后，查看哪些文件有修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div></pre></td></tr></table></figure>\n<p><img src=\"https://pic3.zhimg.com/v2-b90a8993bb2181b3699f02dc808e13ca_b.png\" alt=\"这里写图片描述\"><br>Changes not staged for commit是对项目中已有的文件作出的修改，Untracked files是新建的文件，尚未加到版本库中。</p>\n<p>查看具体有哪些修改，查看全部文件的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff</div></pre></td></tr></table></figure></p>\n<p>或者，查看单个文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff README.md</div></pre></td></tr></table></figure>\n<p>将需要提交的文件加到待提交列表（支持正则表达式），比如把README.md加进去：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add README.md</div></pre></td></tr></table></figure>\n<p>或者把所有修改过的文件全部加进去：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add *</div></pre></td></tr></table></figure>\n<p>提交修改到本地暂存区：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m &apos;my commit message&apos;</div></pre></td></tr></table></figure>\n<p>或者，使用其它的文本编辑器编辑提交信息（输完下面的命令后，会自动跳过去，Mac OX的终端中默认用vim）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit</div></pre></td></tr></table></figure>\n<p>提交修改到远程分支（这时候可能别人已经修改了代码，你的push会被拒绝，先pull一下就可以了）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push</div></pre></td></tr></table></figure>\n<p>获取远程的修改<br>Git是协同工作的工具，我们自己在修改的同时，别人也在修改，那么获取别人的修改就有了一下的命令。</p>\n<p>获取远程仓库的修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch</div></pre></td></tr></table></figure>\n<p>获取远程仓库的修改，并合并到本地分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull</div></pre></td></tr></table></figure>\n<p>有多个远程仓库的话：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull origin1</div><div class=\"line\">git pull origin2</div></pre></td></tr></table></figure>\n<p>简单来说，pull = fetch + merge，详细区别请看git pull与fetch的区别</p>\n<h4 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h4><p>一般来说，刚拉下来的项目代码都是在master分支上，绝大多数情况下，master分支是受保护的分支，不允许直接提交代码，这也是我们在使用Git时应当注意的。master分支在任何情况下都是禁止直接提交代码的。</p>\n<p>查看本地分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch</div></pre></td></tr></table></figure>\n<p>查看远程分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -r</div></pre></td></tr></table></figure>\n<p>查看全部分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -a</div></pre></td></tr></table></figure>\n<p>基于当前所在的本地分支创建一个新分支（比如当前在master分支，执行下面的命令后切到了my-develop分支，但在my-develop分支上push代码到远程仓库仍然是提交到master分支上的）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b my-develop</div></pre></td></tr></table></figure>\n<p>基于远程分支创建一个新分支（也是创建一个新的分支，但是和上面不同的是，在my-branch上push代码会提交到远程的develop分支上）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b origin/develop my-branch</div></pre></td></tr></table></figure>\n<p>切换到本地的另外一个分支上，比如develop-ivan（如果这个分支不存在，会报错，加上参数-b创建新的分支）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout develop-ivan</div></pre></td></tr></table></figure>\n<p>给分支改名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -m old-branch-name new-branch-name</div></pre></td></tr></table></figure>\n<p>把本地分支提交到远程仓库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin -u local-branch-name:remote-branch-name</div></pre></td></tr></table></figure>\n<p>上面的一条命令等同于下面的两条命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin local-branch-name:remote-branch-name</div><div class=\"line\">git branch --set-upstream-to=origin/remote-branch-name local-branch-name</div></pre></td></tr></table></figure>\n<p>删除一个本地分支，比如删除my-branch分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -d my-branch</div></pre></td></tr></table></figure>\n<p>如果本地有commit，无法删除，删除本地本地分支以及此分支上的commit：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -D my-branch</div></pre></td></tr></table></figure>\n<p>删除一个远程分支，比如develop-lee分支(没有直接删除远程分支的命令，使用push命令，本地分支名为空就可以了)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin :develop</div></pre></td></tr></table></figure>\n<p>合并其他分支的代码到当前分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git merge other-branch-name</div></pre></td></tr></table></figure>\n<p>或：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rebase other-branch-name</div></pre></td></tr></table></figure>\n<p>merge和rebase的功能基本相似，都是合并代码，区别是rebase会把git提交的时间线压平，提交的时间线看起来会更加整洁，但是不建议这么做，一般建议使用merge。git中merge和rebase的区别<br>查看提交信息<br>查看当前分支的commit信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log</div></pre></td></tr></table></figure>\n<p>查看每次commit修改的文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log --stat</div></pre></td></tr></table></figure>\n<p>按关键字筛选commit信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log -S keyword</div></pre></td></tr></table></figure>\n<p>按作者筛选commit信息，支持正则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log --author = &quot;Ivan&quot;</div></pre></td></tr></table></figure>\n<h4 id=\"暂存代码\"><a href=\"#暂存代码\" class=\"headerlink\" title=\"暂存代码\"></a>暂存代码</h4><p>有时候，正在自己的分支上开发，突然出现了线上bug，需要去其他分支修复，当前的分支功能又没有开发完毕，你还不想提交未完成的代码，这时候使用stash命令就会很方便。stash命令可以把修改的代码都存在本地，而不commit，之后回来可以恢复之前的修改。常用的stash命令如下：</p>\n<p>查看保存的修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash list</div></pre></td></tr></table></figure>\n<p>查看某一个stash修改的具体内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash show -p stash@&#123;1&#125;</div></pre></td></tr></table></figure>\n<p>查看某一个stash修改的文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash show stash@&#123;0&#125;</div></pre></td></tr></table></figure>\n<p>保存当前的修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash save &quot;save message&quot;</div></pre></td></tr></table></figure>\n<p>或者，自动填写stash message：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash</div></pre></td></tr></table></figure>\n<p>删除某一次stash：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash drop stash@&#123;1&#125;</div></pre></td></tr></table></figure>\n<p>或者删除最近的一次stash：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash drop</div></pre></td></tr></table></figure>\n<p>恢复最近一次stash：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash pop</div></pre></td></tr></table></figure>\n<p>恢复某一次stash：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash pop stash@&#123;1&#125;</div></pre></td></tr></table></figure>\n<p>删除全部的stash：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash clear</div></pre></td></tr></table></figure>\n<h4 id=\"其他常见命令\"><a href=\"#其他常见命令\" class=\"headerlink\" title=\"其他常见命令\"></a>其他常见命令</h4><p>恢复一个文件的修改（和切换分支一样，也是checkout）:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout file_name</div></pre></td></tr></table></figure>\n<p>把提交的文件回滚到某一次提交（先用git log查看提交记录，找到某次提交的sha1值，使用git  reset回到某次提交，其中soft表示保留新的修改但取消git add，mixed表示保留修改和git add，hard表示不保留修改）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log</div><div class=\"line\">git reset --(soft|mixed|hard) 3275a0c85fb2fbbcd6eaa65be1f956d27fa9998b</div></pre></td></tr></table></figure>\n<p>使用git add命令，把文件加到要提交的列表中后，把它待提交列表中移除：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --HEAD filename</div></pre></td></tr></table></figure>\n<p>把一个文件从版本库中移除：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rm filename</div></pre></td></tr></table></figure>\n<h3 id=\"更多应用\"><a href=\"#更多应用\" class=\"headerlink\" title=\"更多应用\"></a>更多应用</h3><p>以上只是Git使用的最基本命令，掌握这些命令，工作中Git操作大部分已经没有问题。当然，Git的功能是很强大的，所能做的事情也远远不止这些，要全面掌握Git的技巧，一两篇文章是说不清楚的。当然，熟悉Git最好的方法就是去实践，学以致用，用的多了自然就记得住。</p>\n<p>查看所有的Git命令，可以详细了解每一条命令以及加参数的用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git --help</div></pre></td></tr></table></figure>\n<p>要想系统学习Git，可以找到的资源有很多，下面是一些学习Git的不错的网站。</p>\n<p>Pro git: <a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">git–distributed-is-the-new-centralized</a>，简体中文版：<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"external\">Pro Git</a></p>\n<p><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"external\">廖雪峰的Git教程</a></p>\n<p><a href=\"http://learngitbranching.js.org/\" target=\"_blank\" rel=\"external\">learngitbranching以游戏的方式学习Git</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>本文出处<a href=\"https://zhuanlan.zhihu.com/p/25415162\" target=\"_blank\" rel=\"external\">https://zhuanlan.zhihu.com/p/25415162</a> 或者 <a href=\"http://blog.csdn.net/u013301192/article/details/69568557\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/u013301192/article/details/69568557</a></em></p>\n<p>Git作为一种常用的现代版本管理工具，应用的十分广泛，作为开发者，Git是一项必不可少的技能，掌握常见的Git命令能够大大提高我们的工作效率。</p>\n<p>这里只介绍最基础的，最常用的命令，配置相关的东西直接略过，git相关的一些概念也不介绍了。在执行下面的命令的时候，假定你已经安装好了git，并且在你的远程git仓库的网站上添加了你的key，建立了安全的连接。以下所有的命令基于Mac OS X 10.12，Git版本2.10.1 (Apple Git-78)。</p>\n<h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><h4 id=\"下载项目\"><a href=\"#下载项目\" class=\"headerlink\" title=\"下载项目\"></a>下载项目</h4><p>拿到项目的git地址，比如这个git@github.com:IvanJLee/git.git，新建一个文件夹，把代码下载下来：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir LearningGit</div><div class=\"line\">cd LearningGit</div><div class=\"line\">git clone git@github.com:IvanJLee/git.git</div></pre></td></tr></table></figure></p>\n<p>等待代码下载完成，LearningGit目录下，多出了一个git文件夹，这个文件夹中就是上面那个仓库的所有文件了。进入git文件夹，查看所有文件，会发现有一个.git文件夹，这就是Git的版本库了。</p>\n<p>有时候是在本地新建的项目，想上传到远程的仓库，在项目的根目录下，初始化git仓库：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div></pre></td></tr></table></figure></p>\n<p>查看远程仓库：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote -v</div></pre></td></tr></table></figure></p>\n<p>添加一个远程仓库：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add origin-name git@github.com:IvanJLee/git.git</div></pre></td></tr></table></figure></p>\n<h4 id=\"个人信息的配置\"><a href=\"#个人信息的配置\" class=\"headerlink\" title=\"个人信息的配置\"></a>个人信息的配置</h4><p>一般一个项目，提交代码的时候都会提前配置好个人信息，以便查看提交的作者信息。没有配置的时候，名字默认是取的是操作系统的当前用户的名字。</p>\n<p>查看配置信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --list</div></pre></td></tr></table></figure></p>\n<p>设置用户名和邮箱（全局的配置加上–global，只是当前项目的话，就不要了，这里一般当前项目没有配的话，就用的是全局的配置。为什么要有两个呢，比如有这样的场景，我的笔记本是公司给配的 ，git的全局配置是真名和公司邮箱，但有时候，我会写一些自己的代码，上传到GitHub上，用的是我的昵称和私人邮箱，所以个人的项目就进行单独的配置）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config (--global) user.name &quot;Ivan&quot;</div><div class=\"line\">git config (--global) user.mail &quot;lijundut@foxmail.com&quot;</div></pre></td></tr></table></figure></p>\n<p>当然修改配置除了上述方法之外，还可以直接改配置文件，可以改的很多，绝对不止用户名和邮箱，修改当前项目的配置的话直接编辑.git/config文件；修改当前用户的配置，编辑~/.gitconfig；修改整个操作系统的配置，编辑/etc/gitconfig.</p>\n<h4 id=\"提交代码\"><a href=\"#提交代码\" class=\"headerlink\" title=\"提交代码\"></a>提交代码</h4><p>对项目中的文件作出修改或删除，或者新建文件之后，查看哪些文件有修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div></pre></td></tr></table></figure>\n<p><img src=\"https://pic3.zhimg.com/v2-b90a8993bb2181b3699f02dc808e13ca_b.png\" alt=\"这里写图片描述\"><br>Changes not staged for commit是对项目中已有的文件作出的修改，Untracked files是新建的文件，尚未加到版本库中。</p>\n<p>查看具体有哪些修改，查看全部文件的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff</div></pre></td></tr></table></figure></p>\n<p>或者，查看单个文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff README.md</div></pre></td></tr></table></figure>\n<p>将需要提交的文件加到待提交列表（支持正则表达式），比如把README.md加进去：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add README.md</div></pre></td></tr></table></figure>\n<p>或者把所有修改过的文件全部加进去：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add *</div></pre></td></tr></table></figure>\n<p>提交修改到本地暂存区：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m &apos;my commit message&apos;</div></pre></td></tr></table></figure>\n<p>或者，使用其它的文本编辑器编辑提交信息（输完下面的命令后，会自动跳过去，Mac OX的终端中默认用vim）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit</div></pre></td></tr></table></figure>\n<p>提交修改到远程分支（这时候可能别人已经修改了代码，你的push会被拒绝，先pull一下就可以了）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push</div></pre></td></tr></table></figure>\n<p>获取远程的修改<br>Git是协同工作的工具，我们自己在修改的同时，别人也在修改，那么获取别人的修改就有了一下的命令。</p>\n<p>获取远程仓库的修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch</div></pre></td></tr></table></figure>\n<p>获取远程仓库的修改，并合并到本地分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull</div></pre></td></tr></table></figure>\n<p>有多个远程仓库的话：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull origin1</div><div class=\"line\">git pull origin2</div></pre></td></tr></table></figure>\n<p>简单来说，pull = fetch + merge，详细区别请看git pull与fetch的区别</p>\n<h4 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h4><p>一般来说，刚拉下来的项目代码都是在master分支上，绝大多数情况下，master分支是受保护的分支，不允许直接提交代码，这也是我们在使用Git时应当注意的。master分支在任何情况下都是禁止直接提交代码的。</p>\n<p>查看本地分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch</div></pre></td></tr></table></figure>\n<p>查看远程分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -r</div></pre></td></tr></table></figure>\n<p>查看全部分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -a</div></pre></td></tr></table></figure>\n<p>基于当前所在的本地分支创建一个新分支（比如当前在master分支，执行下面的命令后切到了my-develop分支，但在my-develop分支上push代码到远程仓库仍然是提交到master分支上的）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b my-develop</div></pre></td></tr></table></figure>\n<p>基于远程分支创建一个新分支（也是创建一个新的分支，但是和上面不同的是，在my-branch上push代码会提交到远程的develop分支上）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b origin/develop my-branch</div></pre></td></tr></table></figure>\n<p>切换到本地的另外一个分支上，比如develop-ivan（如果这个分支不存在，会报错，加上参数-b创建新的分支）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout develop-ivan</div></pre></td></tr></table></figure>\n<p>给分支改名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -m old-branch-name new-branch-name</div></pre></td></tr></table></figure>\n<p>把本地分支提交到远程仓库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin -u local-branch-name:remote-branch-name</div></pre></td></tr></table></figure>\n<p>上面的一条命令等同于下面的两条命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin local-branch-name:remote-branch-name</div><div class=\"line\">git branch --set-upstream-to=origin/remote-branch-name local-branch-name</div></pre></td></tr></table></figure>\n<p>删除一个本地分支，比如删除my-branch分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -d my-branch</div></pre></td></tr></table></figure>\n<p>如果本地有commit，无法删除，删除本地本地分支以及此分支上的commit：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -D my-branch</div></pre></td></tr></table></figure>\n<p>删除一个远程分支，比如develop-lee分支(没有直接删除远程分支的命令，使用push命令，本地分支名为空就可以了)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin :develop</div></pre></td></tr></table></figure>\n<p>合并其他分支的代码到当前分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git merge other-branch-name</div></pre></td></tr></table></figure>\n<p>或：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rebase other-branch-name</div></pre></td></tr></table></figure>\n<p>merge和rebase的功能基本相似，都是合并代码，区别是rebase会把git提交的时间线压平，提交的时间线看起来会更加整洁，但是不建议这么做，一般建议使用merge。git中merge和rebase的区别<br>查看提交信息<br>查看当前分支的commit信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log</div></pre></td></tr></table></figure>\n<p>查看每次commit修改的文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log --stat</div></pre></td></tr></table></figure>\n<p>按关键字筛选commit信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log -S keyword</div></pre></td></tr></table></figure>\n<p>按作者筛选commit信息，支持正则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log --author = &quot;Ivan&quot;</div></pre></td></tr></table></figure>\n<h4 id=\"暂存代码\"><a href=\"#暂存代码\" class=\"headerlink\" title=\"暂存代码\"></a>暂存代码</h4><p>有时候，正在自己的分支上开发，突然出现了线上bug，需要去其他分支修复，当前的分支功能又没有开发完毕，你还不想提交未完成的代码，这时候使用stash命令就会很方便。stash命令可以把修改的代码都存在本地，而不commit，之后回来可以恢复之前的修改。常用的stash命令如下：</p>\n<p>查看保存的修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash list</div></pre></td></tr></table></figure>\n<p>查看某一个stash修改的具体内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash show -p stash@&#123;1&#125;</div></pre></td></tr></table></figure>\n<p>查看某一个stash修改的文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash show stash@&#123;0&#125;</div></pre></td></tr></table></figure>\n<p>保存当前的修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash save &quot;save message&quot;</div></pre></td></tr></table></figure>\n<p>或者，自动填写stash message：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash</div></pre></td></tr></table></figure>\n<p>删除某一次stash：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash drop stash@&#123;1&#125;</div></pre></td></tr></table></figure>\n<p>或者删除最近的一次stash：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash drop</div></pre></td></tr></table></figure>\n<p>恢复最近一次stash：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash pop</div></pre></td></tr></table></figure>\n<p>恢复某一次stash：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash pop stash@&#123;1&#125;</div></pre></td></tr></table></figure>\n<p>删除全部的stash：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash clear</div></pre></td></tr></table></figure>\n<h4 id=\"其他常见命令\"><a href=\"#其他常见命令\" class=\"headerlink\" title=\"其他常见命令\"></a>其他常见命令</h4><p>恢复一个文件的修改（和切换分支一样，也是checkout）:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout file_name</div></pre></td></tr></table></figure>\n<p>把提交的文件回滚到某一次提交（先用git log查看提交记录，找到某次提交的sha1值，使用git  reset回到某次提交，其中soft表示保留新的修改但取消git add，mixed表示保留修改和git add，hard表示不保留修改）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log</div><div class=\"line\">git reset --(soft|mixed|hard) 3275a0c85fb2fbbcd6eaa65be1f956d27fa9998b</div></pre></td></tr></table></figure>\n<p>使用git add命令，把文件加到要提交的列表中后，把它待提交列表中移除：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --HEAD filename</div></pre></td></tr></table></figure>\n<p>把一个文件从版本库中移除：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rm filename</div></pre></td></tr></table></figure>\n<h3 id=\"更多应用\"><a href=\"#更多应用\" class=\"headerlink\" title=\"更多应用\"></a>更多应用</h3><p>以上只是Git使用的最基本命令，掌握这些命令，工作中Git操作大部分已经没有问题。当然，Git的功能是很强大的，所能做的事情也远远不止这些，要全面掌握Git的技巧，一两篇文章是说不清楚的。当然，熟悉Git最好的方法就是去实践，学以致用，用的多了自然就记得住。</p>\n<p>查看所有的Git命令，可以详细了解每一条命令以及加参数的用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git --help</div></pre></td></tr></table></figure>\n<p>要想系统学习Git，可以找到的资源有很多，下面是一些学习Git的不错的网站。</p>\n<p>Pro git: <a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">git–distributed-is-the-new-centralized</a>，简体中文版：<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"external\">Pro Git</a></p>\n<p><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"external\">廖雪峰的Git教程</a></p>\n<p><a href=\"http://learngitbranching.js.org/\" target=\"_blank\" rel=\"external\">learngitbranching以游戏的方式学习Git</a></p>\n"},{"title":"Welcome","date":"2017-06-08T15:12:03.000Z","_content":"\nWelcome\n\n[About Me](about/index.html)\n","source":"_posts/first_page.md","raw":"---\ntitle: Welcome\ndate: 2017-06-08 23:12:03\ntags:\n---\n\nWelcome\n\n[About Me](about/index.html)\n","slug":"first_page","published":1,"updated":"2017-11-18T08:43:31.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja5381ds0002f62mzr3ww56s","content":"<p>Welcome</p>\n<p><a href=\"about/index.html\">About Me</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome</p>\n<p><a href=\"about/index.html\">About Me</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cja5381dq0001f62m6ni0p8t6","tag_id":"cja5381dt0003f62mpbdge998","_id":"cja5381dv0004f62mj5m21h5s"}],"Tag":[{"name":"git","_id":"cja5381dt0003f62mpbdge998"}]}}